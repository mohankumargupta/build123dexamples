Convert build123d script to Fusion360 python api.

Let me describe the structure of this prompt.
- ground rules
- some fusion360 api documentation
- examples of conversion from build123d to fusion 360
- a build123d script to convert

First, some ground rules. Adhere to the following:


**Unit Preservation Strategy**

- Keep original parameters unchanged in millimeters
- Apply conversion ONLY through _build123d_value_to_fusion360_value
- Use converted values exclusively for Fusion operations

Second, some fusion360 api documentation.
** Extrude**
- setSymmetricExtent(distance, isFullLength)
- setOneSideExtent(extent, direction)
  eg. extrudeInput.setOneSideExtent(_build123d_value_to_fusion360_value(distance), adsk.fusion.ExtentDirections.PositiveExtentDirection)
- setTwoSidesExtent(sideOneExtent, sideTwoExtent)
- to extrude through all, use 
        extent_all = adsk.fusion.ThroughAllExtentDefinition.create()
        extrudeInput.setOneSideExtent(extent_all, adsk.fusion.ExtentDirections.PositiveExtentDirection)
Third, examples for converting:

example1_build123d.py:
from build123d import *
from ocp_vscode import show_all

# Parameters
length = 80 * MM
width = 60 * MM
height = 10 * MM

with BuildPart() as example1:
    # All 2D and 3D objects have an align property that defaults to (Align.CENTER, Align.CENTER, Align.CENTER)
    # this indicates alignment in the X Y and Z directiorns respectively.
    # An alignment of Align.MIN in the X direction means that the 2d or 3d shape's leftmost point should be at the origin
    # An alignment of Align.MAX in the X direction means that the 2d or 3d shape's rightmmost point should be at the origin
    # An alignment of Align.CENTER in the X direction means that the 2d or 3d shape's center should be at the origin.
    Box(length, width, height)

part = example1.part
show_all()

example1_fusion360.py:
import adsk.core
import adsk.fusion
import traceback
from typing import Tuple

# Parameters
length = 80.0
width = 60.0
height = 10.0
 
def _build123d_value_to_fusion360_value(build123d_parameter_name: float) -> float:
    return build123d_parameter_name * 0.1 # convert mm to cm

def run(context):
    ui = None
    try:
        app = adsk.core.Application.get()
        ui = app.userInterface

        product = app.activeProduct
        design = adsk.fusion.Design.cast(product)

        if not design:
            ui.messageBox("No active Fusion design")
            return


        # Get root component
        rootComp = design.rootComponent

        # Create a new sketch on the xy plane
        sketch = rootComp.sketches.add(rootComp.xYConstructionPlane)

        # Draw a centered rectangle
        centerPoint = createPoint((0, 0, 0))
        sketch.sketchCurves.sketchLines.addCenterPointRectangle(
            centerPoint, createPoint((length / 2, width / 2, 0))
        )  # z is relative to sketch plane

        # Create the extrusion
        prof = sketch.profiles.item(0)
        distance = _build123d_value_to_fusion360_value(height)
        extInput = rootComp.features.extrudeFeatures.createInput(prof, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)
        # The second parameter is indicates if the distance represents the full height(True) or half the height(False)
        extInput.setSymmetricExtent(adsk.core.ValueInput.createByReal(distance), True)
        rootComp.features.extrudeFeatures.add(extInput)

    except:
        if ui:
            ui.messageBox("Failed:\n{}".format(traceback.format_exc()))


example1_fusion360.py:


Fourth, convert the following build123d script to fusion 360:

from build123d import *
from ocp_vscode import show_all

# Parameters
length = 80 * MM
width = 60 * MM
height = 10 * MM

with BuildPart() as example1:
    Box(length, width, height, align=(Align.CENTER, Align.CENTER, Align.MIN))

part = example1.part
show_all()


