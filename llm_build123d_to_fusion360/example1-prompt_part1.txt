Convert build123d script to Fusion360 python api.

Adhere to the following:

** Notes on build123d **
All 2d,3d objects in build123d have a default align property set to (Align.CENTER, Align.CENTER, Align.CENTER)

** notes on fusion 360 api python**
- do not add sketchdimesions
- use symmetry when possible. If things are centered in build123d, make them centered in fusion 360. 
  If centered rectangle is required, use the centered rectangle rather than the two point rectangle.

** things to add to the top of fusion 360 script**
- python imports should include:
   import traceback
   from typing import Tuple
- copy the parameters, radius an diameters and computed parameters verbatim from build123d script(including comments)
- define the following functions before the run function:

** Inside the run function**
- declare design variables as: design = adsk.fusion.Design.cast(product)
- dont create new component, use the existing one: rootComp = design.rootComponent
- when passing parameters, radius and diameters to a function, then need to be converted using the following functions:
     
  # Passing a float parameter, radius or diameter to a function   
  def _build123d_value_to_fusion360_value(build123d_parameter_name: float)->float:
    return build123d_parameter_name * 0.1 # convert mm to cm

  # Passing adsk.core.ValueInput to a function
  def _convert_to_valueinput(build123d_parameter_name: float)->adsk.core.ValueInput:
    return adsk.core.ValueInput.createByString(f"{build123d_parameter_name}mm") 

- do not not use user parameters in the design, only define them.

**Passing adsk.core.Point3D to functions**
   Use this:
        def createPoint(point: Tuple[float, float, float]) -> adsk.core.Point3D:
            x,y,z = point
            return adsk.core.Point3D.create(x * 0.1, y * 0.1, z * 0.1)

**user Parameters in fusion360**
- all parameters, radius, diameter and computed parameters need to be added to User Parameters in fusion 360
- For fixed value parameters, use (declare function inside run function after design variable is declared)
        def addFixedValueUserParameter(
                param_name: str,
                value: float
                ):
             params = design.userParameters
             params.add(param_name, adsk.core.ValueInput.createByString(f'{value}mm'), "mm",'')
- for computed parameters including computed radius and diameters use(declare function inside run function after design variable is declared)
        def addExpressionUserParameter(
                        param_name: str,
                        expression: str
                        ):
             params = design.userParameters
             params.add(param_name, adsk.core.ValueInput.createByString(f'{expression}mm'), "mm", '')
**Design rules in fusion 360**
- create sketches on primary planes only. When doing a command like extrude that is not on the profile plane, a start extent can be specified
  by either offset distance 

  start_from = adsk.fusion.DistanceExtentDefinition(adsk.core.ValueInput.createByString("2mm"))
  
  or from an object

  mm10 = adsk.core.ValueInput.createByString("10 mm")
  start_from = adsk.fusion.FromEntityStartDefinition.create(body1.faces.item(0), mm10)

  For example, to do a extrude cut
  extrudeInput.startExtent = start_from

- do not create circular holes with sketches. Instead use the following function:
def createHole(
    plane1: adsk.fusion.BRepFace,
    point: adsk.core.Point3D,
    diameter: adsk.core.ValueInput,
    depth: adsk.core.ValueInput,
) -> adsk.fusion.HoleFeature:
    comp: adsk.fusion.Component = plane1.body.parentComponent
    holeFeatures: adsk.fusion.HoleFeatures = comp.features.holeFeatures
    holeInput: adsk.fusion.HoleFeatureInput = holeFeatures.createSimpleInput(diameter)
    holeInput.setPositionByPoint(plane1, point)
    holeInput.setDistanceExtent(depth)

    holeFeat: adsk.fusion.HoleFeature = None
    try:
        holeFeat = holeFeatures.add(holeInput)
    except:
        holeInput.isDefaultDirection = not holeInput.isDefaultDirection  # here
        holeFeat = holeFeatures.add(holeInput)

    return holeFeat

- to get the end face of a single-profile extrude, you would use: 
        ext = extrudes.add(extInput)
        # Get the top face of the box
        topFace = ext.endFaces.item(0)

- polygons in fusion 360 python api sketch.sketchCurves.sketchLines.addScribedPolygon()
    
    
    def addScribedPolygon(self, centerPoint: core.Base, edgeCount: int, angle: float, radius: float, isInscribed: bool) -> SketchLineList:
        """
        Creates either an inscribed or circumscribed n-sided polygon.
        centerPoint : Either an existing SketchPoint or a Point3D object that defines the center point of the polygon. If a SketchPoint object
        is provided the point will continue to control the center of the polygon.
        edgeCount : The number of edges in the resulting polygon.
        angle : Controls the rotation of the polygon around the center point. For a circumscribed polygon, this defines where the center
        of one of the edges will be positioned. For an inscribed polygon, this defines where one of the corners of the polygon
        will be positioned.
        radius : The radius of the circle in centimeters that the polygon goes to, either outside (circumscribed) or inside (inscribed) the circle.
        isInscribed : Specifies if a circumscribed or inscribed polygon should be created.
        Returns a list of the sketch lines that were created to represent the polygon or null in the case of bad input.
        """
    
    
    
  -  The ExtrudeFeatureInput type has method signatures as follows:
       1. def setOneSideExtent(self, extent: ExtentDefinition, direction: ExtentDirections, taperAngle: core.ValueInput = None) -> bool:
       2. def setTwoSidesExtent(self, sideOneExtent: ExtentDefinition, sideTwoExtent: ExtentDefinition, sideOneTaperAngle: core.ValueInput = None, sideTwoTaperAngle: core.ValueInput = None) -> bool:
       3. def setSymmetricExtent(self, distance: core.ValueInput, isFullLength: bool, taperAngle: core.ValueInput = None) -> bool:
          make sure that if using setSymmetricExtent, isFullLength=True
    
    example usage:
    distance = adsk.core.ValueInput.createByReal(userparameter_value('height'))
   extInput.setOneSideExtent(adsk.fusion.DistanceExtentDefinition.create(distance),adsk.fusion.ExtentDirections.PositiveExtentDirection)

    note the use of adsk.fusion.DistanceExtentDefinition.create static method

 
   -  When you want to do a extrude cut, it should be done like this
        note the sign       
    
        distance = adsk.core.ValueInput.createByReal(userparameter_value('hex_depth'))
        extInput.setOneSideExtent(adsk.fusion.DistanceExtentDefinition.create(distance), adsk.fusion.ExtentDirections.NegativeExtentDirection)

    - In build123d, when you are creating sketches, if you need to create or reference points
        the z value is relative to the sketch plane and not absolute value.
    adsk.core.Point3D.create(
            x,
            y,    
            0  # Z-coordinate is 0 relative to the sketch plane
        )


Here is the build123d script.

from build123d import *
from ocp_vscode import show_all

# Parameters
length = 80.0
width = 60.0
height = 10.0

# Radius and Diameters
center_hole_diameter = 22.0
center_hole_radius = center_hole_diameter / 2

with BuildPart() as ex2:
    Box(length, width, height, align=(Align.CENTER, Align.CENTER, Align.CENTER))
    Hole(radius=center_hole_radius)
show_all()

